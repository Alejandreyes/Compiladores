/* The following code was generated by JFlex 1.4.3 on 13/03/18 11:49 PM */

package testmaven;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/03/18 11:49 PM from the specification file
 * <tt>/home/stein/Documentos/Semestres/Semestre20182/Compiladores/Compiladores/Proyectos/Proyecto01/src/main/jflex/Atomos.jflex</tt>
 */
public class Al√©xico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ESPACIOS = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\37\1\41\1\36\3\0\16\37\4\0\1\40\1\30\1\25\1\35"+
    "\1\26\1\30\4\0\1\31\1\30\1\0\1\30\1\1\1\32\1\13"+
    "\11\12\1\27\1\0\1\33\1\34\1\33\2\0\5\26\1\6\15\26"+
    "\1\2\6\26\4\0\1\26\1\0\1\7\2\26\1\15\1\5\1\20"+
    "\1\26\1\22\1\23\2\26\1\10\1\26\1\14\1\16\1\24\1\26"+
    "\1\3\1\11\1\17\1\4\1\26\1\21\3\26\4\0\41\37\2\0"+
    "\4\26\4\0\1\26\2\0\1\37\7\0\1\26\4\0\1\26\5\0"+
    "\27\26\1\0\37\26\1\0\u01ca\26\4\0\14\26\16\0\5\26\7\0"+
    "\1\26\1\0\1\26\21\0\160\37\5\26\1\0\2\26\2\0\4\26"+
    "\10\0\1\26\1\0\3\26\1\0\1\26\1\0\24\26\1\0\123\26"+
    "\1\0\213\26\1\0\5\37\2\0\236\26\11\0\46\26\2\0\1\26"+
    "\7\0\47\26\7\0\1\26\1\0\55\37\1\0\1\37\1\0\2\37"+
    "\1\0\2\37\1\0\1\37\10\0\33\26\5\0\3\26\15\0\5\37"+
    "\6\0\1\26\4\0\13\37\5\0\53\26\37\37\4\0\2\26\1\37"+
    "\143\26\1\0\1\26\10\37\1\0\6\37\2\26\2\37\1\0\4\37"+
    "\2\26\12\37\3\26\2\0\1\26\17\0\1\37\1\26\1\37\36\26"+
    "\33\37\2\0\131\26\13\37\1\26\16\0\12\37\41\26\11\37\2\26"+
    "\4\0\1\26\5\0\26\26\4\37\1\26\11\37\1\26\3\37\1\26"+
    "\5\37\22\0\31\26\3\37\104\0\1\26\1\0\13\26\67\0\33\37"+
    "\1\0\4\37\66\26\3\37\1\26\22\37\1\26\7\37\12\26\2\37"+
    "\2\0\12\37\1\0\7\26\1\0\7\26\1\0\3\37\1\0\10\26"+
    "\2\0\2\26\2\0\26\26\1\0\7\26\1\0\1\26\3\0\4\26"+
    "\2\0\1\37\1\26\7\37\2\0\2\37\2\0\3\37\1\26\10\0"+
    "\1\37\4\0\2\26\1\0\3\26\2\37\2\0\12\37\4\26\7\0"+
    "\1\26\5\0\3\37\1\0\6\26\4\0\2\26\2\0\26\26\1\0"+
    "\7\26\1\0\2\26\1\0\2\26\1\0\2\26\2\0\1\37\1\0"+
    "\5\37\4\0\2\37\2\0\3\37\3\0\1\37\7\0\4\26\1\0"+
    "\1\26\7\0\14\37\3\26\1\37\13\0\3\37\1\0\11\26\1\0"+
    "\3\26\1\0\26\26\1\0\7\26\1\0\2\26\1\0\5\26\2\0"+
    "\1\37\1\26\10\37\1\0\3\37\1\0\3\37\2\0\1\26\17\0"+
    "\2\26\2\37\2\0\12\37\1\0\1\26\17\0\3\37\1\0\10\26"+
    "\2\0\2\26\2\0\26\26\1\0\7\26\1\0\2\26\1\0\5\26"+
    "\2\0\1\37\1\26\7\37\2\0\2\37\2\0\3\37\10\0\2\37"+
    "\4\0\2\26\1\0\3\26\2\37\2\0\12\37\1\0\1\26\20\0"+
    "\1\37\1\26\1\0\6\26\3\0\3\26\1\0\4\26\3\0\2\26"+
    "\1\0\1\26\1\0\2\26\3\0\2\26\3\0\3\26\3\0\14\26"+
    "\4\0\5\37\3\0\3\37\1\0\4\37\2\0\1\26\6\0\1\37"+
    "\16\0\12\37\11\0\1\26\7\0\3\37\1\0\10\26\1\0\3\26"+
    "\1\0\27\26\1\0\12\26\1\0\5\26\3\0\1\26\7\37\1\0"+
    "\3\37\1\0\4\37\7\0\2\37\1\0\2\26\6\0\2\26\2\37"+
    "\2\0\12\37\22\0\2\37\1\0\10\26\1\0\3\26\1\0\27\26"+
    "\1\0\12\26\1\0\5\26\2\0\1\37\1\26\7\37\1\0\3\37"+
    "\1\0\4\37\7\0\2\37\7\0\1\26\1\0\2\26\2\37\2\0"+
    "\12\37\1\0\2\26\17\0\2\37\1\0\10\26\1\0\3\26\1\0"+
    "\51\26\2\0\1\26\7\37\1\0\3\37\1\0\4\37\1\26\10\0"+
    "\1\37\10\0\2\26\2\37\2\0\12\37\12\0\6\26\2\0\2\37"+
    "\1\0\22\26\3\0\30\26\1\0\11\26\1\0\1\26\2\0\7\26"+
    "\3\0\1\37\4\0\6\37\1\0\1\37\1\0\10\37\22\0\2\37"+
    "\15\0\60\26\1\37\2\26\7\37\4\0\10\26\10\37\1\0\12\37"+
    "\47\0\2\26\1\0\1\26\2\0\2\26\1\0\1\26\2\0\1\26"+
    "\6\0\4\26\1\0\7\26\1\0\3\26\1\0\1\26\1\0\1\26"+
    "\2\0\2\26\1\0\4\26\1\37\2\26\6\37\1\0\2\37\1\26"+
    "\2\0\5\26\1\0\1\26\1\0\6\37\2\0\12\37\2\0\4\26"+
    "\40\0\1\26\27\0\2\37\6\0\12\37\13\0\1\37\1\0\1\37"+
    "\1\0\1\37\4\0\2\37\10\26\1\0\44\26\4\0\24\37\1\0"+
    "\2\37\5\26\13\37\1\0\44\37\11\0\1\37\71\0\53\26\24\37"+
    "\1\26\12\37\6\0\6\26\4\37\4\26\3\37\1\26\3\37\2\26"+
    "\7\37\3\26\4\37\15\26\14\37\1\26\17\37\2\0\46\26\1\0"+
    "\1\26\5\0\1\26\2\0\53\26\1\0\u014d\26\1\0\4\26\2\0"+
    "\7\26\1\0\1\26\1\0\4\26\2\0\51\26\1\0\4\26\2\0"+
    "\41\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0\4\26\2\0"+
    "\17\26\1\0\71\26\1\0\4\26\2\0\103\26\2\0\3\37\40\0"+
    "\20\26\20\0\125\26\14\0\u026c\26\2\0\21\26\1\0\32\26\5\0"+
    "\113\26\3\0\3\26\17\0\15\26\1\0\4\26\3\37\13\0\22\26"+
    "\3\37\13\0\22\26\2\37\14\0\15\26\1\0\3\26\1\0\2\37"+
    "\14\0\64\26\40\37\3\0\1\26\3\0\2\26\1\37\2\0\12\37"+
    "\41\0\3\37\2\0\12\37\6\0\130\26\10\0\51\26\1\37\1\26"+
    "\5\0\106\26\12\0\35\26\3\0\14\37\4\0\14\37\12\0\12\37"+
    "\36\26\2\0\5\26\13\0\54\26\4\0\21\37\7\26\2\37\6\0"+
    "\12\37\46\0\27\26\5\37\4\0\65\26\12\37\1\0\35\37\2\0"+
    "\13\37\6\0\12\37\15\0\1\26\130\0\5\37\57\26\21\37\7\26"+
    "\4\0\12\37\21\0\11\37\14\0\3\37\36\26\15\37\2\26\12\37"+
    "\54\26\16\37\14\0\44\26\24\37\10\0\12\37\3\0\3\26\12\37"+
    "\44\26\122\0\3\37\1\0\25\37\4\26\1\37\4\26\3\37\2\26"+
    "\11\0\300\26\47\37\25\0\4\37\u0116\26\2\0\6\26\2\0\46\26"+
    "\2\0\6\26\2\0\10\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\37\26\2\0\65\26\1\0\7\26\1\0\1\26\3\0\3\26"+
    "\1\0\7\26\3\0\4\26\2\0\6\26\4\0\15\26\5\0\3\26"+
    "\1\0\7\26\16\0\5\37\32\0\5\37\20\0\2\26\23\0\1\26"+
    "\13\0\5\37\5\0\6\37\1\0\1\26\15\0\1\26\20\0\15\26"+
    "\3\0\33\26\25\0\15\37\4\0\1\37\3\0\14\37\21\0\1\26"+
    "\4\0\1\26\2\0\12\26\1\0\1\26\3\0\5\26\6\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\1\0\13\26\2\0\4\26"+
    "\5\0\5\26\4\0\1\26\21\0\51\26\u0a77\0\57\26\1\0\57\26"+
    "\1\0\205\26\6\0\4\26\3\37\2\26\14\0\46\26\1\0\1\26"+
    "\5\0\1\26\2\0\70\26\7\0\1\26\17\0\1\37\27\26\11\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\40\37\57\0\1\26\u01d5\0"+
    "\3\26\31\0\11\26\6\37\1\0\5\26\2\0\5\26\4\0\126\26"+
    "\2\0\2\37\2\0\3\26\1\0\132\26\1\0\4\26\5\0\51\26"+
    "\3\0\136\26\21\0\33\26\65\0\20\26\u0200\0\u19b6\26\112\0\u51cd\26"+
    "\63\0\u048d\26\103\0\56\26\2\0\u010d\26\3\0\20\26\12\37\2\26"+
    "\24\0\57\26\1\37\4\0\12\37\1\0\31\26\7\0\1\37\120\26"+
    "\2\37\45\0\11\26\2\0\147\26\2\0\4\26\1\0\4\26\14\0"+
    "\13\26\115\0\12\26\1\37\3\26\1\37\4\26\1\37\27\26\5\37"+
    "\20\0\1\26\7\0\64\26\14\0\2\37\62\26\21\37\13\0\12\37"+
    "\6\0\22\37\6\26\3\0\1\26\4\0\12\37\34\26\10\37\2\0"+
    "\27\26\15\37\14\0\35\26\3\0\4\37\57\26\16\37\16\0\1\26"+
    "\12\37\46\0\51\26\16\37\11\0\3\26\1\37\10\26\2\37\2\0"+
    "\12\37\6\0\27\26\3\0\1\26\1\37\4\0\60\26\1\37\1\26"+
    "\3\37\2\26\2\37\5\26\2\37\1\26\1\37\1\26\30\0\3\26"+
    "\2\0\13\26\5\37\2\0\3\26\2\37\12\0\6\26\2\0\6\26"+
    "\2\0\6\26\11\0\7\26\1\0\7\26\221\0\43\26\10\37\1\0"+
    "\2\37\2\0\12\37\6\0\u2ba4\26\14\0\27\26\4\0\61\26\u2104\0"+
    "\u016e\26\2\0\152\26\46\0\7\26\14\0\5\26\5\0\1\26\1\37"+
    "\12\26\1\0\15\26\1\0\5\26\1\0\1\26\1\0\2\26\1\0"+
    "\2\26\1\0\154\26\41\0\u016b\26\22\0\100\26\2\0\66\26\50\0"+
    "\15\26\3\0\20\37\20\0\7\37\14\0\2\26\30\0\3\26\31\0"+
    "\1\26\6\0\5\26\1\0\207\26\2\0\1\37\4\0\1\26\13\0"+
    "\12\37\7\0\32\26\4\0\1\26\1\0\32\26\13\0\131\26\3\0"+
    "\6\26\2\0\6\26\2\0\6\26\2\0\3\26\3\0\2\26\3\0"+
    "\2\26\22\0\3\37\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\2\2\5\3\2\4\6\3\1\2\1\5\4\1"+
    "\1\6\1\7\1\10\1\11\2\12\4\3\1\12\1\3"+
    "\1\13\2\3\1\0\1\14\1\15\5\3\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[47];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\104\0\104\0\u0264\0\u0286\0\u02a8\0\u02ca"+
    "\0\104\0\u02ec\0\104\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396"+
    "\0\u03b8\0\146\0\u03da\0\252\0\u03fc\0\u041e\0\u0242\0\104"+
    "\0\u02ec\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8\0\252";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[47];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\6\1\7\1\10\1\11\2\6"+
    "\1\12\1\13\1\14\1\6\1\15\1\6\1\16\1\17"+
    "\1\6\1\20\1\21\1\22\1\6\1\23\1\24\1\25"+
    "\1\26\2\27\1\30\1\31\4\3\1\4\1\5\2\6"+
    "\1\7\1\10\1\11\2\6\1\12\1\13\1\14\1\6"+
    "\1\15\1\6\1\16\1\17\1\6\1\20\1\21\1\22"+
    "\1\6\1\23\1\24\1\25\1\26\2\27\1\30\1\31"+
    "\1\3\1\32\1\33\54\0\1\34\1\35\30\0\1\6"+
    "\1\36\21\6\1\0\1\6\10\0\1\6\4\0\23\6"+
    "\1\0\1\6\10\0\1\6\4\0\6\6\1\37\14\6"+
    "\1\0\1\6\10\0\1\6\4\0\5\6\1\40\15\6"+
    "\1\0\1\6\10\0\1\6\4\0\12\6\1\41\10\6"+
    "\1\0\1\6\10\0\1\6\3\0\1\42\10\0\2\12"+
    "\27\0\1\42\11\0\1\13\30\0\14\6\1\43\6\6"+
    "\1\0\1\6\10\0\1\6\4\0\1\6\1\44\21\6"+
    "\1\0\1\6\10\0\1\6\4\0\14\6\1\15\6\6"+
    "\1\0\1\6\10\0\1\6\4\0\20\6\1\45\2\6"+
    "\1\0\1\6\10\0\1\6\4\0\16\6\1\44\4\6"+
    "\1\0\1\6\10\0\1\6\4\0\1\6\1\46\21\6"+
    "\1\0\1\6\10\0\1\6\4\0\10\47\2\0\11\47"+
    "\1\50\1\47\44\0\1\25\42\0\1\24\43\0\1\24"+
    "\5\0\36\30\1\0\3\30\40\0\1\51\13\0\2\34"+
    "\41\0\1\35\30\0\2\6\1\52\20\6\1\0\1\6"+
    "\10\0\1\6\4\0\7\6\1\53\11\6\1\20\1\6"+
    "\1\0\1\6\10\0\1\6\4\0\6\6\1\54\14\6"+
    "\1\0\1\6\10\0\1\6\4\0\13\6\1\44\7\6"+
    "\1\0\1\6\10\0\1\6\4\0\15\6\1\44\5\6"+
    "\1\0\1\6\10\0\1\6\4\0\21\6\1\55\1\6"+
    "\1\0\1\6\10\0\1\6\4\0\21\6\1\56\1\6"+
    "\1\0\1\6\10\0\1\6\4\0\3\6\1\57\17\6"+
    "\1\0\1\6\10\0\1\6\4\0\3\6\1\44\17\6"+
    "\1\0\1\6\10\0\1\6\4\0\7\6\1\52\13\6"+
    "\1\0\1\6\10\0\1\6\4\0\6\6\1\53\14\6"+
    "\1\0\1\6\10\0\1\6\4\0\12\6\1\43\10\6"+
    "\1\0\1\6\10\0\1\6\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1258];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\1\11\17\1\2\11\4\1\1\11\1\1\1\11"+
    "\13\1\1\0\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[47];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int espacios = 0 ;
  /* %line Sirve para crear un identificador en que linea se encuentra el token que esta siendo reconozido*/
  ControladorAnalisisLexico controlador  = new ControladorAnalisisLexico();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Al√©xico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Al√©xico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { espacios += 4 ;
              yybegin(YYINITIAL);
              return ("NUMERO DE ESPACIOS("+espacios+")");
          }
        case 15: break;
        case 13: 
          { yybegin(YYINITIAL);
              return ("NUMERO DE ESPACIOS("+yytext().length()+")");
          }
        case 16: break;
        case 3: 
          { return "ID_PYTHON("+yytext() + ")";
          }
        case 17: break;
        case 10: 
          { return "FLOAT ("+yytext()+")";
          }
        case 18: break;
        case 5: 
          { return "SEPARADOR("+yytext()+")";
          }
        case 19: break;
        case 11: 
          { return "RESERVADA("+yytext()+")";
          }
        case 20: break;
        case 4: 
          { return "ENTERO("+yytext()+")";
          }
        case 21: break;
        case 12: 
          { return "CADENA( "+yytext() + ")";
          }
        case 22: break;
        case 7: 
          { yybegin(ESPACIOS);
          }
        case 23: break;
        case 6: 
          { return "COMMENT( "+yytext() + ")";
          }
        case 24: break;
        case 1: 
          { return "OPERADOR("+yytext()+")";
          }
        case 25: break;
        case 8: 
          { yybegin(YYINITIAL);
          }
        case 26: break;
        case 14: 
          { return "BOOLEAN("+yytext()+")";
          }
        case 27: break;
        case 2: 
          { 
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
