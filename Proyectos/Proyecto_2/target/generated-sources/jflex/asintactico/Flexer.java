/* The following code was generated by JFlex 1.4.3 on 26/04/18 07:57 PM */

/********************************************************************************
**  @author Diana Montes                                                       **
**  @about Proyecto 1: Analizador l√©xico para p, subconjunto de Python.        **
*********************************************************************************/
package asintactico;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/04/18 07:57 PM from the specification file
 * <tt>/home/stein/Documentos/Semestres/Semestre20182/Compiladores/Compiladores/Proyectos/Proyecto_2/src/main/jflex/Atomos.jflex</tt>
 */
public class Flexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INDENTA = 2;
  public static final int YYINITIAL = 0;
  public static final int CODIGO = 6;
  public static final int CADENA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\40\25\0\1\43\1\33\1\47\1\44\1\42\1\27"+
    "\2\0\1\34\1\35\1\25\1\23\1\0\1\24\1\1\1\26\1\2"+
    "\11\2\1\36\1\37\1\31\1\32\1\30\2\0\5\41\1\46\15\41"+
    "\1\45\6\41\1\0\1\42\2\0\1\41\1\0\1\3\2\41\1\5"+
    "\1\17\1\6\1\41\1\14\1\15\2\41\1\16\1\11\1\4\1\10"+
    "\1\21\1\41\1\7\1\20\1\12\1\22\1\41\1\13\3\41\57\0"+
    "\1\41\12\0\1\41\4\0\1\41\5\0\27\41\1\0\37\41\1\0"+
    "\u01ca\41\4\0\14\41\16\0\5\41\7\0\1\41\1\0\1\41\201\0"+
    "\5\41\1\0\2\41\2\0\4\41\10\0\1\41\1\0\3\41\1\0"+
    "\1\41\1\0\24\41\1\0\123\41\1\0\213\41\10\0\236\41\11\0"+
    "\46\41\2\0\1\41\7\0\47\41\110\0\33\41\5\0\3\41\55\0"+
    "\53\41\25\0\12\42\4\0\2\41\1\0\143\41\1\0\1\41\17\0"+
    "\2\41\7\0\2\41\12\42\3\41\2\0\1\41\20\0\1\41\1\0"+
    "\36\41\35\0\131\41\13\0\1\41\16\0\12\42\41\41\11\0\2\41"+
    "\4\0\1\41\5\0\26\41\4\0\1\41\11\0\1\41\3\0\1\41"+
    "\27\0\31\41\107\0\1\41\1\0\13\41\127\0\66\41\3\0\1\41"+
    "\22\0\1\41\7\0\12\41\4\0\12\42\1\0\7\41\1\0\7\41"+
    "\5\0\10\41\2\0\2\41\2\0\26\41\1\0\7\41\1\0\1\41"+
    "\3\0\4\41\3\0\1\41\20\0\1\41\15\0\2\41\1\0\3\41"+
    "\4\0\12\42\2\41\23\0\6\41\4\0\2\41\2\0\26\41\1\0"+
    "\7\41\1\0\2\41\1\0\2\41\1\0\2\41\37\0\4\41\1\0"+
    "\1\41\7\0\12\42\2\0\3\41\20\0\11\41\1\0\3\41\1\0"+
    "\26\41\1\0\7\41\1\0\2\41\1\0\5\41\3\0\1\41\22\0"+
    "\1\41\17\0\2\41\4\0\12\42\25\0\10\41\2\0\2\41\2\0"+
    "\26\41\1\0\7\41\1\0\2\41\1\0\5\41\3\0\1\41\36\0"+
    "\2\41\1\0\3\41\4\0\12\42\1\0\1\41\21\0\1\41\1\0"+
    "\6\41\3\0\3\41\1\0\4\41\3\0\2\41\1\0\1\41\1\0"+
    "\2\41\3\0\2\41\3\0\3\41\3\0\14\41\26\0\1\41\25\0"+
    "\12\42\25\0\10\41\1\0\3\41\1\0\27\41\1\0\12\41\1\0"+
    "\5\41\3\0\1\41\32\0\2\41\6\0\2\41\4\0\12\42\25\0"+
    "\10\41\1\0\3\41\1\0\27\41\1\0\12\41\1\0\5\41\3\0"+
    "\1\41\40\0\1\41\1\0\2\41\4\0\12\42\1\0\2\41\22\0"+
    "\10\41\1\0\3\41\1\0\51\41\2\0\1\41\20\0\1\41\21\0"+
    "\2\41\4\0\12\42\12\0\6\41\5\0\22\41\3\0\30\41\1\0"+
    "\11\41\1\0\1\41\2\0\7\41\72\0\60\41\1\0\2\41\14\0"+
    "\7\41\11\0\12\42\47\0\2\41\1\0\1\41\2\0\2\41\1\0"+
    "\1\41\2\0\1\41\6\0\4\41\1\0\7\41\1\0\3\41\1\0"+
    "\1\41\1\0\1\41\2\0\2\41\1\0\4\41\1\0\2\41\11\0"+
    "\1\41\2\0\5\41\1\0\1\41\11\0\12\42\2\0\4\41\40\0"+
    "\1\41\37\0\12\42\26\0\10\41\1\0\44\41\33\0\5\41\163\0"+
    "\53\41\24\0\1\41\12\42\6\0\6\41\4\0\4\41\3\0\1\41"+
    "\3\0\2\41\7\0\3\41\4\0\15\41\14\0\1\41\1\0\12\42"+
    "\6\0\46\41\1\0\1\41\5\0\1\41\2\0\53\41\1\0\u014d\41"+
    "\1\0\4\41\2\0\7\41\1\0\1\41\1\0\4\41\2\0\51\41"+
    "\1\0\4\41\2\0\41\41\1\0\4\41\2\0\7\41\1\0\1\41"+
    "\1\0\4\41\2\0\17\41\1\0\71\41\1\0\4\41\2\0\103\41"+
    "\45\0\20\41\20\0\125\41\14\0\u026c\41\2\0\21\41\1\0\32\41"+
    "\5\0\113\41\25\0\15\41\1\0\4\41\16\0\22\41\16\0\22\41"+
    "\16\0\15\41\1\0\3\41\17\0\64\41\43\0\1\41\4\0\1\41"+
    "\3\0\12\42\46\0\12\42\6\0\130\41\10\0\51\41\1\0\1\41"+
    "\5\0\106\41\12\0\35\41\51\0\12\42\36\41\2\0\5\41\13\0"+
    "\54\41\25\0\7\41\10\0\12\42\46\0\27\41\11\0\65\41\53\0"+
    "\12\42\6\0\12\42\15\0\1\41\135\0\57\41\21\0\7\41\4\0"+
    "\12\42\51\0\36\41\15\0\2\41\12\42\54\41\32\0\44\41\34\0"+
    "\12\42\3\0\3\41\12\42\44\41\153\0\4\41\1\0\4\41\3\0"+
    "\2\41\11\0\300\41\100\0\u0116\41\2\0\6\41\2\0\46\41\2\0"+
    "\6\41\2\0\10\41\1\0\1\41\1\0\1\41\1\0\1\41\1\0"+
    "\37\41\2\0\65\41\1\0\7\41\1\0\1\41\3\0\3\41\1\0"+
    "\7\41\3\0\4\41\2\0\6\41\4\0\15\41\5\0\3\41\1\0"+
    "\7\41\164\0\1\41\15\0\1\41\20\0\15\41\145\0\1\41\4\0"+
    "\1\41\2\0\12\41\1\0\1\41\3\0\5\41\6\0\1\41\1\0"+
    "\1\41\1\0\1\41\1\0\4\41\1\0\13\41\2\0\4\41\5\0"+
    "\5\41\4\0\1\41\64\0\2\41\u0a7b\0\57\41\1\0\57\41\1\0"+
    "\205\41\6\0\4\41\3\0\2\41\14\0\46\41\1\0\1\41\5\0"+
    "\1\41\2\0\70\41\7\0\1\41\20\0\27\41\11\0\7\41\1\0"+
    "\7\41\1\0\7\41\1\0\7\41\1\0\7\41\1\0\7\41\1\0"+
    "\7\41\1\0\7\41\120\0\1\41\u01d5\0\2\41\52\0\5\41\5\0"+
    "\2\41\4\0\126\41\6\0\3\41\1\0\132\41\1\0\4\41\5\0"+
    "\51\41\3\0\136\41\21\0\33\41\65\0\20\41\u0200\0\u19b6\41\112\0"+
    "\u51cd\41\63\0\u048d\41\103\0\56\41\2\0\u010d\41\3\0\20\41\12\42"+
    "\2\41\24\0\57\41\20\0\31\41\10\0\106\41\61\0\11\41\2\0"+
    "\147\41\2\0\4\41\1\0\4\41\14\0\13\41\115\0\12\41\1\0"+
    "\3\41\1\0\4\41\1\0\27\41\35\0\64\41\16\0\62\41\34\0"+
    "\12\42\30\0\6\41\3\0\1\41\4\0\12\42\34\41\12\0\27\41"+
    "\31\0\35\41\7\0\57\41\34\0\1\41\12\42\46\0\51\41\27\0"+
    "\3\41\1\0\10\41\4\0\12\42\6\0\27\41\3\0\1\41\5\0"+
    "\60\41\1\0\1\41\3\0\2\41\2\0\5\41\2\0\1\41\1\0"+
    "\1\41\30\0\3\41\2\0\13\41\7\0\3\41\14\0\6\41\2\0"+
    "\6\41\2\0\6\41\11\0\7\41\1\0\7\41\221\0\43\41\15\0"+
    "\12\42\6\0\u2ba4\41\14\0\27\41\4\0\61\41\u2104\0\u016e\41\2\0"+
    "\152\41\46\0\7\41\14\0\5\41\5\0\1\41\1\0\12\41\1\0"+
    "\15\41\1\0\5\41\1\0\1\41\1\0\2\41\1\0\2\41\1\0"+
    "\154\41\41\0\u016b\41\22\0\100\41\2\0\66\41\50\0\14\41\164\0"+
    "\5\41\1\0\207\41\23\0\12\42\7\0\32\41\6\0\32\41\13\0"+
    "\131\41\3\0\6\41\2\0\6\41\2\0\6\41\2\0\3\41\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\4\1\7\1\10\1\3\1\10\1\2\1\11\12\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\2\1\23\1\24\1\25\1\26\1\27\1\2\2\12"+
    "\1\30\1\0\1\31\5\12\1\32\1\12\1\33\2\12"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\12\1\42"+
    "\1\43\1\12\1\44\7\12\1\45\2\12\1\46\1\47"+
    "\1\12\1\50\2\12\1\51\1\52\1\53\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\244\0\315\0\366"+
    "\0\244\0\244\0\244\0\366\0\244\0\244\0\244\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\244"+
    "\0\244\0\u0386\0\244\0\u03af\0\u03d8\0\244\0\244\0\244"+
    "\0\244\0\244\0\366\0\u0401\0\u042a\0\244\0\366\0\u011f"+
    "\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u01c3\0\u0520\0\u01c3"+
    "\0\u0549\0\u0572\0\244\0\244\0\244\0\244\0\244\0\244"+
    "\0\u059b\0\u05c4\0\u01c3\0\u01c3\0\u05ed\0\u01c3\0\u0616\0\u063f"+
    "\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u01c3\0\u0735\0\u075e"+
    "\0\u01c3\0\u01c3\0\u0787\0\u01c3\0\u07b0\0\u07d9\0\u01c3\0\u01c3"+
    "\0\u01c3\0\u01c3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\40\5\1\6\2\5\1\7\1\10\4\5\40\11\1\12"+
    "\2\11\1\13\1\14\3\11\1\15\2\6\21\16\15\6"+
    "\1\17\3\16\1\20\2\16\3\6\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\2\25\1\31\1\25"+
    "\1\32\1\25\1\33\1\25\1\34\1\25\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\25\2\6\1\53\1\54"+
    "\1\55\1\56\1\6\114\0\1\7\5\0\40\57\1\6"+
    "\10\57\2\0\1\60\47\0\1\60\1\22\50\0\2\25"+
    "\1\61\16\25\16\0\1\25\3\0\2\25\4\0\6\25"+
    "\1\62\12\25\16\0\1\25\3\0\2\25\4\0\21\25"+
    "\16\0\1\25\3\0\2\25\4\0\5\25\1\63\1\64"+
    "\12\25\16\0\1\25\3\0\2\25\4\0\15\25\1\65"+
    "\3\25\16\0\1\25\3\0\2\25\4\0\5\25\1\66"+
    "\13\25\16\0\1\25\3\0\2\25\4\0\12\25\1\67"+
    "\6\25\16\0\1\25\3\0\2\25\4\0\4\25\1\70"+
    "\14\25\16\0\1\25\3\0\2\25\4\0\14\25\1\71"+
    "\4\25\16\0\1\25\3\0\2\25\4\0\5\25\1\72"+
    "\13\25\16\0\1\25\3\0\2\25\34\0\1\73\50\0"+
    "\1\74\43\0\1\75\55\0\1\76\50\0\1\77\50\0"+
    "\1\100\20\0\5\25\1\101\13\25\16\0\1\25\3\0"+
    "\2\25\4\0\1\25\1\102\17\25\16\0\1\25\3\0"+
    "\2\25\4\0\3\25\1\103\15\25\16\0\1\25\3\0"+
    "\2\25\4\0\10\25\1\104\10\25\16\0\1\25\3\0"+
    "\2\25\4\0\6\25\1\105\12\25\16\0\1\25\3\0"+
    "\2\25\4\0\5\25\1\106\13\25\16\0\1\25\3\0"+
    "\2\25\4\0\10\25\1\107\10\25\16\0\1\25\3\0"+
    "\2\25\4\0\13\25\1\110\5\25\16\0\1\25\3\0"+
    "\2\25\4\0\13\25\1\111\2\25\1\112\2\25\16\0"+
    "\1\25\3\0\2\25\4\0\13\25\1\113\5\25\16\0"+
    "\1\25\3\0\2\25\4\0\20\25\1\114\16\0\1\25"+
    "\3\0\2\25\4\0\14\25\1\115\4\25\16\0\1\25"+
    "\3\0\2\25\4\0\7\25\1\116\11\25\16\0\1\25"+
    "\3\0\2\25\4\0\20\25\1\117\16\0\1\25\3\0"+
    "\2\25\4\0\14\25\1\120\4\25\16\0\1\25\3\0"+
    "\2\25\4\0\4\25\1\121\14\25\16\0\1\25\3\0"+
    "\2\25\4\0\15\25\1\122\3\25\16\0\1\25\3\0"+
    "\2\25\4\0\2\25\1\123\16\25\16\0\1\25\3\0"+
    "\2\25\4\0\15\25\1\124\3\25\16\0\1\25\3\0"+
    "\2\25\4\0\16\25\1\125\2\25\16\0\1\25\3\0"+
    "\2\25\4\0\5\25\1\126\13\25\16\0\1\25\3\0"+
    "\2\25\4\0\15\25\1\127\3\25\16\0\1\25\3\0"+
    "\2\25\4\0\10\25\1\130\10\25\16\0\1\25\3\0"+
    "\2\25\4\0\15\25\1\131\3\25\16\0\1\25\3\0"+
    "\2\25\4\0\2\25\1\132\16\25\16\0\1\25\3\0"+
    "\2\25\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\2\1\3\11\1\1\3\11\20\1\2\11"+
    "\1\1\1\11\2\1\5\11\3\1\1\11\1\0\13\1"+
    "\6\11\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Parser parser;

    public Flexer (java.io.Reader r, Parser p){
    	   this(r);
    	   parser = p;
    }
    
    /* Acumula todos los √°tomos de DEINDENTA que deben ser devueltos  */
    static String dedents = "";
    /* Estructura auxiliar para almacenar los bloques de indentaci√≥n */
    static Stack<Integer> pila = new Stack<Integer>();
    /* Guarda el nivel actual de indentaci√≥n */
    static Integer actual = 0;
    /** Funci√≥n que maneja los niveles de indetaci√≥n e imprime
    * √°tomos INDENTA y DEINDENTA.
    * @param int espacios - nivel de indetaci√≥n actual.
    * @return boolean - true en caso que no haya errores l√©xicos,
    * 	      	      	 false en otro caso.
    */
    public static boolean indentacion(int espacios){
        if(pila.empty()){ //ponerle un cero a la pila si esta vacia
             pila.push(new Integer(0));
        }

        Integer tope = pila.peek();

        if(tope != espacios){
	    //Se debe emitir un DEDENT por cada nivel mayor al actual
            if(tope > espacios){
                while(pila.peek() > espacios &&  pila.peek()!=0 ){
                    dedents += "DEINDENTA("+pila.pop()+")\n";
                }
                if(pila.peek() == espacios){
                    System.out.print(dedents);
                    dedents = "";
                    return true;
                }
                return false;
            }
   	    //El nivel actual de indentaci√≥n es mayor a los anteriores.
            pila.push(espacios);
            System.out.println("INDENTA("+actual+")");
            return true;
        }
	//El nivel actual es igual al anterior.
        return true;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Flexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Flexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1700) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { return Parser.IF ;
          }
        case 45: break;
        case 36: 
          { return Parser.FOR ;
          }
        case 46: break;
        case 34: 
          { return Parser.AND;
          }
        case 47: break;
        case 26: 
          { return Parser.OR ;
          }
        case 48: break;
        case 7: 
          { actual += 4;return Parser.INDENTA;
          }
        case 49: break;
        case 44: 
          { return Parser.RETURN ;
          }
        case 50: break;
        case 12: 
          { return Parser.MENOS ;
          }
        case 51: break;
        case 6: 
          { actual++; return Parser.INDENTA;
          }
        case 52: break;
        case 19: 
          { return Parser.PARIZQ ;
          }
        case 53: break;
        case 16: 
          { return Parser.MAYOR ;
          }
        case 54: break;
        case 22: 
          { return Parser.PUNTOCOMA ;
          }
        case 55: break;
        case 30: 
          { return Parser.EXP ;
          }
        case 56: break;
        case 33: 
          { return Parser.DIST ;
          }
        case 57: break;
        case 25: 
          { return Parser.REAL;
          }
        case 58: break;
        case 11: 
          { return Parser.MAS ;
          }
        case 59: break;
        case 17: 
          { return Parser.MENOR ;
          }
        case 60: break;
        case 4: 
          { yypushback(1);
                                          /* if(!indentacion(actual)){
                                                System.out.println("Error de indentacion, linea "+(yyline+1));
                                                System.exit(1);
                                          } */
					  yybegin(CODIGO);
          }
        case 61: break;
        case 31: 
          { return Parser.MAYORIG ;
          }
        case 62: break;
        case 29: 
          { return Parser.MENOSIG ;
          }
        case 63: break;
        case 1: 
          { yybegin(CODIGO);
          }
        case 64: break;
        case 8: 
          { yybegin(CODIGO); return Parser.CADENA;
          }
        case 65: break;
        case 18: 
          { return Parser.IGUAL ;
          }
        case 66: break;
        case 5: 
          { actual = 0; return Parser.SALTO;
          }
        case 67: break;
        case 10: 
          { return Parser.IDENTIFICADOR;
          }
        case 68: break;
        case 32: 
          { return Parser.IGUALIG ;
          }
        case 69: break;
        case 38: 
          { return Parser.ELIF ;
          }
        case 70: break;
        case 41: 
          { return Parser.WHILE ;
          }
        case 71: break;
        case 42: 
          { return Parser.PRINT;
          }
        case 72: break;
        case 40: 
          { return Parser.TRUE ;
          }
        case 73: break;
        case 21: 
          { return Parser.DOSPUNTOS ;
          }
        case 74: break;
        case 35: 
          { return Parser.NOT ;
          }
        case 75: break;
        case 28: 
          { return Parser.MASIG ;
          }
        case 76: break;
        case 14: 
          { return Parser.DIV ;
          }
        case 77: break;
        case 39: 
          { return Parser.ELSE ;
          }
        case 78: break;
        case 13: 
          { return Parser.MULT ;
          }
        case 79: break;
        case 15: 
          { return Parser.MOD ;
          }
        case 80: break;
        case 23: 
          { yybegin(INDENTA); actual=0; return Parser.SALTO;
          }
        case 81: break;
        case 20: 
          { return Parser.PARDER ;
          }
        case 82: break;
        case 9: 
          { return Parser.ENTERO;
          }
        case 83: break;
        case 3: 
          { System.exit(1);
          }
        case 84: break;
        case 43: 
          { return Parser.FALSE ;
          }
        case 85: break;
        case 24: 
          { yybegin(CADENA);
          }
        case 86: break;
        case 37: 
          { return Parser.FROM;
          }
        case 87: break;
        case 2: 
          { 
          }
        case 88: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                indentacion(0); System.out.println("Simulacion Exitosa"); System.exit(0);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Flexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Flexer scanner = null;
        try {
          scanner = new Flexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
